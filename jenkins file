node {
    // Get Artifactory server instance, defined in the Artifactory Plugin administration page.
    def server = Artifactory. Server "SERVER_ID"
    // create an Artifactory Maven instance.
    def rtMaven = Artifactory.newMavenBuild ()
    def buildInfo

    Stage ('Clone sources') {
        git url: 'https://github.com/jfrogdev/project-examples.git'(give your git url)
    }

    stage ('Artifactory configuration') {
        // Tool name from Jenkins configuration
        rtMaven. Tool = "Maven-3.3.9"
        // Set Artifactory repositories for dependencies resolution and artifacts deployment.
        rtMaven.deployer releaseRepo:'libs-release-local', snapshotRepo:'libs-snapshot-local', server: server
        rtMaven.resolver releaseRepo:'libs-release', snapshotRepo:'libs-snapshot', server: server
    }

    stage('Maven build') {
        buildInfo = rtMaven.run pom: 'maven-example/pom.xml', goals: 'clean install'
    }

    stage('Publish build info') {
        server.publishBuildInfo buildInfo
    }
}
node('test') {
    // compute complete workspace path, from current node to the allocated disk
    exws(extWorkspace) {
        try {
            // run tests in the same workspace that the project was built
            bat 'mvn test'
        } catch (e) {
            // if any exception occurs, mark the build as failed
            currentBuild.result = 'FAILURE'
            throw e
        } finally {
            // perform workspace cleanup only if the build have passed
            // if the build has failed, the workspace will be kept
            cleanWs cleanWhenFailure: false
        }
    }
}

